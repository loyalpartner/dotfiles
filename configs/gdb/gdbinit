# GDB Configuration File
# Organization:
# - settings/: Basic GDB settings
# - modules/: Feature modules
#   - break_history/: Breakpoint persistence
#   - editors/: Editor integration
#   - printers/: Pretty printers
# - local config support for machine-specific settings

python
import os
from os.path import exists, expandvars, join

# Import core functionality
gdb.execute(f'source {expandvars("$HOME/dotfiles/configs/gdb/modules/core.py")}')
from core import load_module, validate_config, logger

# Configuration directories
CONFIG_ROOT = expandvars('$HOME/dotfiles/configs/gdb')
MODULE_DIR = join(CONFIG_ROOT, 'modules')
SETTINGS_DIR = join(CONFIG_ROOT, 'settings')

# Validate configuration
if not validate_config(MODULE_DIR):
    logger.error("Configuration validation failed")
else:
    logger.info("Configuration validation successful")

# Load basic settings
for setting in ['debugging', 'history', 'display']:
    setting_file = join(SETTINGS_DIR, f'{setting}.gdb')
    try:
        if exists(setting_file):
            gdb.execute(f'source {setting_file}')
            logger.info(f"Loaded settings: {setting}")
    except Exception as e:
        logger.error(f"Failed to load {setting} settings: {e}")

# Module configuration
ENABLED_MODULES = {
    'printers': True,      # Pretty printers for various types
    'break_history': True, # Breakpoint persistence
    'editors': True       # Editor integration
}

# Load enabled modules
for module, enabled in ENABLED_MODULES.items():
    if enabled:
        load_module(module)

#######################
#  Custom Commands   #
#######################

# Print values in hex format
define px
    set $i=0
    while $i < $argc
        eval "p/x $arg%d",$i
        set $i = $i + 1
    end
end

document px
Print values in hexadecimal format
Usage: px expr1 expr2 ...
end

#######################
#  Local Settings    #
#######################

python
# Load local machine-specific settings if they exist
local_config = expandvars('$HOME/.gdb.local.config')
if exists(local_config):
    try:
        gdb.execute(f'source {local_config}')
        logger.info("Loaded local configuration")
    except Exception as e:
        logger.error(f"Failed to load local configuration: {e}")
end

# Set better prompt
set prompt \033[01;31m(gdb) \033[0m